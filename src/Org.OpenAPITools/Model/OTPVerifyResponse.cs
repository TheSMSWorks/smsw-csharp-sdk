/*
 * The SMS Works API
 *
 * The SMS Works provides a low-cost, reliable SMS API for developers. Pay only for delivered texts, all failed UK messages are refunded.
 *
 * The version of the OpenAPI document: 1.9.0
 * Contact: support@thesmsworks.co.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Response schema for the /otp/verify method
    /// </summary>
    [DataContract(Name = "OTPVerifyResponse")]
    public partial class OTPVerifyResponse : IEquatable<OTPVerifyResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OTPVerifyResponse" /> class.
        /// </summary>
        /// <param name="destination">The mobile number that the OTP was sent to.</param>
        /// <param name="status">The status of the OTP. If the passcode is used within the validity period then this will be &#39;VERIFIED&#39;, otherwise it will be &#39;EXPIRED&#39;.</param>
        /// <param name="passcode">The passcode used..</param>
        /// <param name="validity">The length of time in seconds for which the generated passcode is valid..</param>
        /// <param name="metadata">A JSON object storing data supplied when this passcode was generated, for use in your application..</param>
        /// <param name="created">The ISO 8601 date/time at which this OTP was created.</param>
        /// <param name="expires">The ISO 8601 date/time at which this OTP expires.</param>
        /// <param name="modified">The ISO 8601 date/time at which this OTP was modified (typically when it was verified).</param>
        public OTPVerifyResponse(string destination = default(string), string status = default(string), decimal passcode = default(decimal), decimal validity = default(decimal), Object metadata = default(Object), string created = default(string), string expires = default(string), string modified = default(string))
        {
            this.Destination = destination;
            this.Status = status;
            this.Passcode = passcode;
            this.Validity = validity;
            this.Metadata = metadata;
            this.Created = created;
            this.Expires = expires;
            this.Modified = modified;
        }

        /// <summary>
        /// The mobile number that the OTP was sent to
        /// </summary>
        /// <value>The mobile number that the OTP was sent to</value>
        /// <example>447777000000</example>
        [DataMember(Name = "destination", EmitDefaultValue = false)]
        public string Destination { get; set; }

        /// <summary>
        /// The status of the OTP. If the passcode is used within the validity period then this will be &#39;VERIFIED&#39;, otherwise it will be &#39;EXPIRED&#39;
        /// </summary>
        /// <value>The status of the OTP. If the passcode is used within the validity period then this will be &#39;VERIFIED&#39;, otherwise it will be &#39;EXPIRED&#39;</value>
        /// <example>VERIFIED</example>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// The passcode used.
        /// </summary>
        /// <value>The passcode used.</value>
        /// <example>123456</example>
        [DataMember(Name = "passcode", EmitDefaultValue = false)]
        public decimal Passcode { get; set; }

        /// <summary>
        /// The length of time in seconds for which the generated passcode is valid.
        /// </summary>
        /// <value>The length of time in seconds for which the generated passcode is valid.</value>
        /// <example>300</example>
        [DataMember(Name = "validity", EmitDefaultValue = false)]
        public decimal Validity { get; set; }

        /// <summary>
        /// A JSON object storing data supplied when this passcode was generated, for use in your application.
        /// </summary>
        /// <value>A JSON object storing data supplied when this passcode was generated, for use in your application.</value>
        /// <example>{&quot;customer_id&quot;:&quot;ABC123&quot;,&quot;cart_id&quot;:&quot;XYZ789&quot;}</example>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public Object Metadata { get; set; }

        /// <summary>
        /// The ISO 8601 date/time at which this OTP was created
        /// </summary>
        /// <value>The ISO 8601 date/time at which this OTP was created</value>
        /// <example>Tue Apr 25 2023 16:47:00 GMT+0100 (British Summer Time)</example>
        [DataMember(Name = "created", EmitDefaultValue = false)]
        public string Created { get; set; }

        /// <summary>
        /// The ISO 8601 date/time at which this OTP expires
        /// </summary>
        /// <value>The ISO 8601 date/time at which this OTP expires</value>
        /// <example>Tue Apr 25 2023 16:57:00 GMT+0100 (British Summer Time)</example>
        [DataMember(Name = "expires", EmitDefaultValue = false)]
        public string Expires { get; set; }

        /// <summary>
        /// The ISO 8601 date/time at which this OTP was modified (typically when it was verified)
        /// </summary>
        /// <value>The ISO 8601 date/time at which this OTP was modified (typically when it was verified)</value>
        /// <example>Tue Apr 25 2023 16:49:20 GMT+0100 (British Summer Time)</example>
        [DataMember(Name = "modified", EmitDefaultValue = false)]
        public string Modified { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OTPVerifyResponse {\n");
            sb.Append("  Destination: ").Append(Destination).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Passcode: ").Append(Passcode).Append("\n");
            sb.Append("  Validity: ").Append(Validity).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Expires: ").Append(Expires).Append("\n");
            sb.Append("  Modified: ").Append(Modified).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OTPVerifyResponse);
        }

        /// <summary>
        /// Returns true if OTPVerifyResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of OTPVerifyResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OTPVerifyResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Destination == input.Destination ||
                    (this.Destination != null &&
                    this.Destination.Equals(input.Destination))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Passcode == input.Passcode ||
                    this.Passcode.Equals(input.Passcode)
                ) && 
                (
                    this.Validity == input.Validity ||
                    this.Validity.Equals(input.Validity)
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.Expires == input.Expires ||
                    (this.Expires != null &&
                    this.Expires.Equals(input.Expires))
                ) && 
                (
                    this.Modified == input.Modified ||
                    (this.Modified != null &&
                    this.Modified.Equals(input.Modified))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Destination != null)
                {
                    hashCode = (hashCode * 59) + this.Destination.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Passcode.GetHashCode();
                hashCode = (hashCode * 59) + this.Validity.GetHashCode();
                if (this.Metadata != null)
                {
                    hashCode = (hashCode * 59) + this.Metadata.GetHashCode();
                }
                if (this.Created != null)
                {
                    hashCode = (hashCode * 59) + this.Created.GetHashCode();
                }
                if (this.Expires != null)
                {
                    hashCode = (hashCode * 59) + this.Expires.GetHashCode();
                }
                if (this.Modified != null)
                {
                    hashCode = (hashCode * 59) + this.Modified.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
