/*
 * The SMS Works API
 *
 * The SMS Works provides a low-cost, reliable SMS API for developers. Pay only for delivered texts, all failed UK messages are refunded.
 *
 * The version of the OpenAPI document: 1.9.0
 * Contact: support@thesmsworks.co.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Response schema for the /otp/send method
    /// </summary>
    [DataContract(Name = "OTPResponse")]
    public partial class OTPResponse : IEquatable<OTPResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OTPResponse" /> class.
        /// </summary>
        /// <param name="messageid">The messageid of the SMS used to send the OTP. Save this in your application to use when verifying passcodes..</param>
        /// <param name="status">The initial status of the OTP message..</param>
        /// <param name="credits">The credit balance on your account.</param>
        /// <param name="creditsUsed">The number of credits used to send this message.</param>
        /// <param name="messageparts">The number of message parts used to send this message.</param>
        public OTPResponse(string messageid = default(string), string status = default(string), decimal credits = default(decimal), decimal creditsUsed = default(decimal), decimal messageparts = default(decimal))
        {
            this.Messageid = messageid;
            this.Status = status;
            this.Credits = credits;
            this.CreditsUsed = creditsUsed;
            this.Messageparts = messageparts;
        }

        /// <summary>
        /// The messageid of the SMS used to send the OTP. Save this in your application to use when verifying passcodes.
        /// </summary>
        /// <value>The messageid of the SMS used to send the OTP. Save this in your application to use when verifying passcodes.</value>
        /// <example>52692416-ce9e-45ad-aa1e-14fcee8fa662</example>
        [DataMember(Name = "messageid", EmitDefaultValue = false)]
        public string Messageid { get; set; }

        /// <summary>
        /// The initial status of the OTP message.
        /// </summary>
        /// <value>The initial status of the OTP message.</value>
        /// <example>SENT</example>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// The credit balance on your account
        /// </summary>
        /// <value>The credit balance on your account</value>
        /// <example>561</example>
        [DataMember(Name = "credits", EmitDefaultValue = false)]
        public decimal Credits { get; set; }

        /// <summary>
        /// The number of credits used to send this message
        /// </summary>
        /// <value>The number of credits used to send this message</value>
        /// <example>1</example>
        [DataMember(Name = "creditsUsed", EmitDefaultValue = false)]
        public decimal CreditsUsed { get; set; }

        /// <summary>
        /// The number of message parts used to send this message
        /// </summary>
        /// <value>The number of message parts used to send this message</value>
        /// <example>1</example>
        [DataMember(Name = "messageparts", EmitDefaultValue = false)]
        public decimal Messageparts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OTPResponse {\n");
            sb.Append("  Messageid: ").Append(Messageid).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Credits: ").Append(Credits).Append("\n");
            sb.Append("  CreditsUsed: ").Append(CreditsUsed).Append("\n");
            sb.Append("  Messageparts: ").Append(Messageparts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OTPResponse);
        }

        /// <summary>
        /// Returns true if OTPResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of OTPResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OTPResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Messageid == input.Messageid ||
                    (this.Messageid != null &&
                    this.Messageid.Equals(input.Messageid))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Credits == input.Credits ||
                    this.Credits.Equals(input.Credits)
                ) && 
                (
                    this.CreditsUsed == input.CreditsUsed ||
                    this.CreditsUsed.Equals(input.CreditsUsed)
                ) && 
                (
                    this.Messageparts == input.Messageparts ||
                    this.Messageparts.Equals(input.Messageparts)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Messageid != null)
                {
                    hashCode = (hashCode * 59) + this.Messageid.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Credits.GetHashCode();
                hashCode = (hashCode * 59) + this.CreditsUsed.GetHashCode();
                hashCode = (hashCode * 59) + this.Messageparts.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
