/*
 * The SMS Works API
 *
 * The SMS Works provides a low-cost, reliable SMS API for developers. Pay only for delivered texts, all failed UK messages are refunded.
 *
 * The version of the OpenAPI document: 1.9.0
 * Contact: support@thesmsworks.co.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Parameters for the generation and sending of One-Time Passwords
    /// </summary>
    [DataContract(Name = "OTP")]
    public partial class OTP : IEquatable<OTP>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OTP" /> class.
        /// </summary>
        /// <param name="sender">The sender of the message. Should be no longer than 11 characters for alphanumeric or 15 characters for numeric sender ID&#39;s. No spaces or special characters..</param>
        /// <param name="destination">The phone number of the recipient..</param>
        /// <param name="length">The length of the generated passcode. The default length is 6 characters, which will apply if this parameter is omitted. All generated passcodes are numeric. Optional..</param>
        /// <param name="template">A template to use as the content for the message. You must include the &#39;{{passcode}}&#39; placeholder, which will be replaced by the generated passcode when the message is sent. Optional..</param>
        /// <param name="validity">The length of time in seconds for which the generated passcode should be valid. Optional..</param>
        /// <param name="passcode">A passcode you supply for use in the message template. This will be stored on the OTP record in our system for later verification. Optional..</param>
        /// <param name="metadata">A JSON object of no longer than 1024 bytes, containing as many parameters as you wish, to store data for use in your application. This will be returned when you verify the passcode..</param>
        public OTP(string sender = default(string), string destination = default(string), Object length = default(Object), string template = default(string), decimal validity = default(decimal), string passcode = default(string), Object metadata = default(Object))
        {
            this.Sender = sender;
            this.Destination = destination;
            this.Length = length;
            this.Template = template;
            this.Validity = validity;
            this.Passcode = passcode;
            this.Metadata = metadata;
        }

        /// <summary>
        /// The sender of the message. Should be no longer than 11 characters for alphanumeric or 15 characters for numeric sender ID&#39;s. No spaces or special characters.
        /// </summary>
        /// <value>The sender of the message. Should be no longer than 11 characters for alphanumeric or 15 characters for numeric sender ID&#39;s. No spaces or special characters.</value>
        /// <example>YourCompany</example>
        [DataMember(Name = "sender", EmitDefaultValue = false)]
        public string Sender { get; set; }

        /// <summary>
        /// The phone number of the recipient.
        /// </summary>
        /// <value>The phone number of the recipient.</value>
        /// <example>7777777777</example>
        [DataMember(Name = "destination", EmitDefaultValue = false)]
        public string Destination { get; set; }

        /// <summary>
        /// The length of the generated passcode. The default length is 6 characters, which will apply if this parameter is omitted. All generated passcodes are numeric. Optional.
        /// </summary>
        /// <value>The length of the generated passcode. The default length is 6 characters, which will apply if this parameter is omitted. All generated passcodes are numeric. Optional.</value>
        [DataMember(Name = "length", EmitDefaultValue = false)]
        public Object Length { get; set; }

        /// <summary>
        /// A template to use as the content for the message. You must include the &#39;{{passcode}}&#39; placeholder, which will be replaced by the generated passcode when the message is sent. Optional.
        /// </summary>
        /// <value>A template to use as the content for the message. You must include the &#39;{{passcode}}&#39; placeholder, which will be replaced by the generated passcode when the message is sent. Optional.</value>
        /// <example>This is your one-time passcode - {{passcode}}</example>
        [DataMember(Name = "template", EmitDefaultValue = false)]
        public string Template { get; set; }

        /// <summary>
        /// The length of time in seconds for which the generated passcode should be valid. Optional.
        /// </summary>
        /// <value>The length of time in seconds for which the generated passcode should be valid. Optional.</value>
        /// <example>300</example>
        [DataMember(Name = "validity", EmitDefaultValue = false)]
        public decimal Validity { get; set; }

        /// <summary>
        /// A passcode you supply for use in the message template. This will be stored on the OTP record in our system for later verification. Optional.
        /// </summary>
        /// <value>A passcode you supply for use in the message template. This will be stored on the OTP record in our system for later verification. Optional.</value>
        /// <example>123456</example>
        [DataMember(Name = "passcode", EmitDefaultValue = false)]
        public string Passcode { get; set; }

        /// <summary>
        /// A JSON object of no longer than 1024 bytes, containing as many parameters as you wish, to store data for use in your application. This will be returned when you verify the passcode.
        /// </summary>
        /// <value>A JSON object of no longer than 1024 bytes, containing as many parameters as you wish, to store data for use in your application. This will be returned when you verify the passcode.</value>
        /// <example>{&quot;customer_id&quot;:&quot;ABC123&quot;,&quot;cart_id&quot;:&quot;XYZ789&quot;}</example>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public Object Metadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OTP {\n");
            sb.Append("  Sender: ").Append(Sender).Append("\n");
            sb.Append("  Destination: ").Append(Destination).Append("\n");
            sb.Append("  Length: ").Append(Length).Append("\n");
            sb.Append("  Template: ").Append(Template).Append("\n");
            sb.Append("  Validity: ").Append(Validity).Append("\n");
            sb.Append("  Passcode: ").Append(Passcode).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OTP);
        }

        /// <summary>
        /// Returns true if OTP instances are equal
        /// </summary>
        /// <param name="input">Instance of OTP to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OTP input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Sender == input.Sender ||
                    (this.Sender != null &&
                    this.Sender.Equals(input.Sender))
                ) && 
                (
                    this.Destination == input.Destination ||
                    (this.Destination != null &&
                    this.Destination.Equals(input.Destination))
                ) && 
                (
                    this.Length == input.Length ||
                    (this.Length != null &&
                    this.Length.Equals(input.Length))
                ) && 
                (
                    this.Template == input.Template ||
                    (this.Template != null &&
                    this.Template.Equals(input.Template))
                ) && 
                (
                    this.Validity == input.Validity ||
                    this.Validity.Equals(input.Validity)
                ) && 
                (
                    this.Passcode == input.Passcode ||
                    (this.Passcode != null &&
                    this.Passcode.Equals(input.Passcode))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Sender != null)
                {
                    hashCode = (hashCode * 59) + this.Sender.GetHashCode();
                }
                if (this.Destination != null)
                {
                    hashCode = (hashCode * 59) + this.Destination.GetHashCode();
                }
                if (this.Length != null)
                {
                    hashCode = (hashCode * 59) + this.Length.GetHashCode();
                }
                if (this.Template != null)
                {
                    hashCode = (hashCode * 59) + this.Template.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Validity.GetHashCode();
                if (this.Passcode != null)
                {
                    hashCode = (hashCode * 59) + this.Passcode.GetHashCode();
                }
                if (this.Metadata != null)
                {
                    hashCode = (hashCode * 59) + this.Metadata.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
