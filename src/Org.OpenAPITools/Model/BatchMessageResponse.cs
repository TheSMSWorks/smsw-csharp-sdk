/*
 * The SMS Works API
 *
 * The SMS Works provides a low-cost, reliable SMS API for developers. Pay only for delivered texts, all failed UK messages are refunded.
 *
 * The version of the OpenAPI document: 1.9.0
 * Contact: support@thesmsworks.co.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// BatchMessageResponse
    /// </summary>
    [DataContract(Name = "BatchMessageResponse")]
    public partial class BatchMessageResponse : IEquatable<BatchMessageResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BatchMessageResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BatchMessageResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BatchMessageResponse" /> class.
        /// </summary>
        /// <param name="batchid">batchid (required).</param>
        /// <param name="status">status (required).</param>
        public BatchMessageResponse(string batchid = default(string), string status = default(string))
        {
            // to ensure "batchid" is required (not null)
            if (batchid == null)
            {
                throw new ArgumentNullException("batchid is a required property for BatchMessageResponse and cannot be null");
            }
            this.Batchid = batchid;
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new ArgumentNullException("status is a required property for BatchMessageResponse and cannot be null");
            }
            this.Status = status;
        }

        /// <summary>
        /// Gets or Sets Batchid
        /// </summary>
        /// <example>2586749</example>
        [DataMember(Name = "batchid", IsRequired = true, EmitDefaultValue = true)]
        public string Batchid { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        /// <example>SCHEDULED</example>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public string Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BatchMessageResponse {\n");
            sb.Append("  Batchid: ").Append(Batchid).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BatchMessageResponse);
        }

        /// <summary>
        /// Returns true if BatchMessageResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of BatchMessageResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BatchMessageResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Batchid == input.Batchid ||
                    (this.Batchid != null &&
                    this.Batchid.Equals(input.Batchid))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Batchid != null)
                {
                    hashCode = (hashCode * 59) + this.Batchid.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
