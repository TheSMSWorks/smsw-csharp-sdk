/* 
 * The SMS Works API
 *
 * The SMS Works provides a low-cost, reliable SMS API for developers. Pay only for delivered texts, all failed messages are refunded.
 *
 * OpenAPI spec version: 1.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMessagesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancels a scheduled SMS message
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageid">The ID of the message you would like returned</param>
        /// <returns>CancelledMessageResponse</returns>
        CancelledMessageResponse CancelScheduledJob (string messageid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancels a scheduled SMS message
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageid">The ID of the message you would like returned</param>
        /// <returns>ApiResponse of CancelledMessageResponse</returns>
        ApiResponse<CancelledMessageResponse> CancelScheduledJobWithHttpInfo (string messageid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get unread uncoming messages matching your search criteria
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <returns>MessagesResponse</returns>
        MessagesResponse GetInboxMessages (Query query);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get unread uncoming messages matching your search criteria
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <returns>ApiResponse of MessagesResponse</returns>
        ApiResponse<MessagesResponse> GetInboxMessagesWithHttpInfo (Query query);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve a logged message by the message ID
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageid">The ID of the message you would like returned</param>
        /// <returns>MessageResponse</returns>
        MessageResponse GetMessageById (string messageid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve a logged message by the message ID
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageid">The ID of the message you would like returned</param>
        /// <returns>ApiResponse of MessageResponse</returns>
        ApiResponse<MessageResponse> GetMessageByIdWithHttpInfo (string messageid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get messages matching your search criteria
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <returns>MessagesResponse</returns>
        MessagesResponse GetMessages (Query query);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get messages matching your search criteria
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <returns>ApiResponse of MessagesResponse</returns>
        ApiResponse<MessagesResponse> GetMessagesWithHttpInfo (Query query);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Schedules an SMS message to be sent at the date-time you specify
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessage">Message properties</param>
        /// <returns>ScheduledMessageResponse</returns>
        ScheduledMessageResponse ScheduleMessage (Message smsMessage);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Schedules an SMS message to be sent at the date-time you specify
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessage">Message properties</param>
        /// <returns>ApiResponse of ScheduledMessageResponse</returns>
        ApiResponse<ScheduledMessageResponse> ScheduleMessageWithHttpInfo (Message smsMessage);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sends an SMS message
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessage">Message properties</param>
        /// <returns>SendMessageResponse</returns>
        SendMessageResponse SendMessage (Message smsMessage);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sends an SMS message
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessage">Message properties</param>
        /// <returns>ApiResponse of SendMessageResponse</returns>
        ApiResponse<SendMessageResponse> SendMessageWithHttpInfo (Message smsMessage);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancels a scheduled SMS message
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageid">The ID of the message you would like returned</param>
        /// <returns>Task of CancelledMessageResponse</returns>
        System.Threading.Tasks.Task<CancelledMessageResponse> CancelScheduledJobAsync (string messageid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancels a scheduled SMS message
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageid">The ID of the message you would like returned</param>
        /// <returns>Task of ApiResponse (CancelledMessageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CancelledMessageResponse>> CancelScheduledJobAsyncWithHttpInfo (string messageid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get unread uncoming messages matching your search criteria
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <returns>Task of MessagesResponse</returns>
        System.Threading.Tasks.Task<MessagesResponse> GetInboxMessagesAsync (Query query);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get unread uncoming messages matching your search criteria
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <returns>Task of ApiResponse (MessagesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MessagesResponse>> GetInboxMessagesAsyncWithHttpInfo (Query query);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve a logged message by the message ID
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageid">The ID of the message you would like returned</param>
        /// <returns>Task of MessageResponse</returns>
        System.Threading.Tasks.Task<MessageResponse> GetMessageByIdAsync (string messageid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve a logged message by the message ID
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageid">The ID of the message you would like returned</param>
        /// <returns>Task of ApiResponse (MessageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MessageResponse>> GetMessageByIdAsyncWithHttpInfo (string messageid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get messages matching your search criteria
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <returns>Task of MessagesResponse</returns>
        System.Threading.Tasks.Task<MessagesResponse> GetMessagesAsync (Query query);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get messages matching your search criteria
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <returns>Task of ApiResponse (MessagesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MessagesResponse>> GetMessagesAsyncWithHttpInfo (Query query);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Schedules an SMS message to be sent at the date-time you specify
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessage">Message properties</param>
        /// <returns>Task of ScheduledMessageResponse</returns>
        System.Threading.Tasks.Task<ScheduledMessageResponse> ScheduleMessageAsync (Message smsMessage);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Schedules an SMS message to be sent at the date-time you specify
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessage">Message properties</param>
        /// <returns>Task of ApiResponse (ScheduledMessageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScheduledMessageResponse>> ScheduleMessageAsyncWithHttpInfo (Message smsMessage);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sends an SMS message
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessage">Message properties</param>
        /// <returns>Task of SendMessageResponse</returns>
        System.Threading.Tasks.Task<SendMessageResponse> SendMessageAsync (Message smsMessage);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sends an SMS message
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessage">Message properties</param>
        /// <returns>Task of ApiResponse (SendMessageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SendMessageResponse>> SendMessageAsyncWithHttpInfo (Message smsMessage);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MessagesApi : IMessagesApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MessagesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MessagesApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MessagesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MessagesApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Cancels a scheduled SMS message
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageid">The ID of the message you would like returned</param>
        /// <returns>CancelledMessageResponse</returns>
        public CancelledMessageResponse CancelScheduledJob (string messageid)
        {
             ApiResponse<CancelledMessageResponse> localVarResponse = CancelScheduledJobWithHttpInfo(messageid);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Cancels a scheduled SMS message
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageid">The ID of the message you would like returned</param>
        /// <returns>ApiResponse of CancelledMessageResponse</returns>
        public ApiResponse< CancelledMessageResponse > CancelScheduledJobWithHttpInfo (string messageid)
        {
            // verify the required parameter 'messageid' is set
            if (messageid == null)
                throw new ApiException(400, "Missing required parameter 'messageid' when calling MessagesApi->CancelScheduledJob");

            var localVarPath = "/messages/schedule/{messageid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (messageid != null) localVarPathParams.Add("messageid", Configuration.ApiClient.ParameterToString(messageid)); // path parameter

            // authentication (JWT) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelScheduledJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CancelledMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CancelledMessageResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CancelledMessageResponse)));
        }

        /// <summary>
        ///  Cancels a scheduled SMS message
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageid">The ID of the message you would like returned</param>
        /// <returns>Task of CancelledMessageResponse</returns>
        public async System.Threading.Tasks.Task<CancelledMessageResponse> CancelScheduledJobAsync (string messageid)
        {
             ApiResponse<CancelledMessageResponse> localVarResponse = await CancelScheduledJobAsyncWithHttpInfo(messageid);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Cancels a scheduled SMS message
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageid">The ID of the message you would like returned</param>
        /// <returns>Task of ApiResponse (CancelledMessageResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CancelledMessageResponse>> CancelScheduledJobAsyncWithHttpInfo (string messageid)
        {
            // verify the required parameter 'messageid' is set
            if (messageid == null)
                throw new ApiException(400, "Missing required parameter 'messageid' when calling MessagesApi->CancelScheduledJob");

            var localVarPath = "/messages/schedule/{messageid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (messageid != null) localVarPathParams.Add("messageid", Configuration.ApiClient.ParameterToString(messageid)); // path parameter

            // authentication (JWT) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelScheduledJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CancelledMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CancelledMessageResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CancelledMessageResponse)));
        }

        /// <summary>
        ///  Get unread uncoming messages matching your search criteria
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <returns>MessagesResponse</returns>
        public MessagesResponse GetInboxMessages (Query query)
        {
             ApiResponse<MessagesResponse> localVarResponse = GetInboxMessagesWithHttpInfo(query);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get unread uncoming messages matching your search criteria
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <returns>ApiResponse of MessagesResponse</returns>
        public ApiResponse< MessagesResponse > GetInboxMessagesWithHttpInfo (Query query)
        {
            // verify the required parameter 'query' is set
            if (query == null)
                throw new ApiException(400, "Missing required parameter 'query' when calling MessagesApi->GetInboxMessages");

            var localVarPath = "/messages/inbox";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (query != null && query.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(query); // http body (model) parameter
            }
            else
            {
                localVarPostBody = query; // byte array
            }

            // authentication (JWT) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInboxMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessagesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MessagesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessagesResponse)));
        }

        /// <summary>
        ///  Get unread uncoming messages matching your search criteria
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <returns>Task of MessagesResponse</returns>
        public async System.Threading.Tasks.Task<MessagesResponse> GetInboxMessagesAsync (Query query)
        {
             ApiResponse<MessagesResponse> localVarResponse = await GetInboxMessagesAsyncWithHttpInfo(query);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get unread uncoming messages matching your search criteria
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <returns>Task of ApiResponse (MessagesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MessagesResponse>> GetInboxMessagesAsyncWithHttpInfo (Query query)
        {
            // verify the required parameter 'query' is set
            if (query == null)
                throw new ApiException(400, "Missing required parameter 'query' when calling MessagesApi->GetInboxMessages");

            var localVarPath = "/messages/inbox";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (query != null && query.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(query); // http body (model) parameter
            }
            else
            {
                localVarPostBody = query; // byte array
            }

            // authentication (JWT) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInboxMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessagesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MessagesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessagesResponse)));
        }

        /// <summary>
        ///  Retrieve a logged message by the message ID
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageid">The ID of the message you would like returned</param>
        /// <returns>MessageResponse</returns>
        public MessageResponse GetMessageById (string messageid)
        {
             ApiResponse<MessageResponse> localVarResponse = GetMessageByIdWithHttpInfo(messageid);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve a logged message by the message ID
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageid">The ID of the message you would like returned</param>
        /// <returns>ApiResponse of MessageResponse</returns>
        public ApiResponse< MessageResponse > GetMessageByIdWithHttpInfo (string messageid)
        {
            // verify the required parameter 'messageid' is set
            if (messageid == null)
                throw new ApiException(400, "Missing required parameter 'messageid' when calling MessagesApi->GetMessageById");

            var localVarPath = "/messages/{messageid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (messageid != null) localVarPathParams.Add("messageid", Configuration.ApiClient.ParameterToString(messageid)); // path parameter

            // authentication (JWT) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessageById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MessageResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessageResponse)));
        }

        /// <summary>
        ///  Retrieve a logged message by the message ID
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageid">The ID of the message you would like returned</param>
        /// <returns>Task of MessageResponse</returns>
        public async System.Threading.Tasks.Task<MessageResponse> GetMessageByIdAsync (string messageid)
        {
             ApiResponse<MessageResponse> localVarResponse = await GetMessageByIdAsyncWithHttpInfo(messageid);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve a logged message by the message ID
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageid">The ID of the message you would like returned</param>
        /// <returns>Task of ApiResponse (MessageResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MessageResponse>> GetMessageByIdAsyncWithHttpInfo (string messageid)
        {
            // verify the required parameter 'messageid' is set
            if (messageid == null)
                throw new ApiException(400, "Missing required parameter 'messageid' when calling MessagesApi->GetMessageById");

            var localVarPath = "/messages/{messageid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (messageid != null) localVarPathParams.Add("messageid", Configuration.ApiClient.ParameterToString(messageid)); // path parameter

            // authentication (JWT) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessageById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MessageResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessageResponse)));
        }

        /// <summary>
        ///  Get messages matching your search criteria
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <returns>MessagesResponse</returns>
        public MessagesResponse GetMessages (Query query)
        {
             ApiResponse<MessagesResponse> localVarResponse = GetMessagesWithHttpInfo(query);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get messages matching your search criteria
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <returns>ApiResponse of MessagesResponse</returns>
        public ApiResponse< MessagesResponse > GetMessagesWithHttpInfo (Query query)
        {
            // verify the required parameter 'query' is set
            if (query == null)
                throw new ApiException(400, "Missing required parameter 'query' when calling MessagesApi->GetMessages");

            var localVarPath = "/messages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (query != null && query.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(query); // http body (model) parameter
            }
            else
            {
                localVarPostBody = query; // byte array
            }

            // authentication (JWT) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessagesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MessagesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessagesResponse)));
        }

        /// <summary>
        ///  Get messages matching your search criteria
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <returns>Task of MessagesResponse</returns>
        public async System.Threading.Tasks.Task<MessagesResponse> GetMessagesAsync (Query query)
        {
             ApiResponse<MessagesResponse> localVarResponse = await GetMessagesAsyncWithHttpInfo(query);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get messages matching your search criteria
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <returns>Task of ApiResponse (MessagesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MessagesResponse>> GetMessagesAsyncWithHttpInfo (Query query)
        {
            // verify the required parameter 'query' is set
            if (query == null)
                throw new ApiException(400, "Missing required parameter 'query' when calling MessagesApi->GetMessages");

            var localVarPath = "/messages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (query != null && query.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(query); // http body (model) parameter
            }
            else
            {
                localVarPostBody = query; // byte array
            }

            // authentication (JWT) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessagesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MessagesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessagesResponse)));
        }

        /// <summary>
        ///  Schedules an SMS message to be sent at the date-time you specify
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessage">Message properties</param>
        /// <returns>ScheduledMessageResponse</returns>
        public ScheduledMessageResponse ScheduleMessage (Message smsMessage)
        {
             ApiResponse<ScheduledMessageResponse> localVarResponse = ScheduleMessageWithHttpInfo(smsMessage);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Schedules an SMS message to be sent at the date-time you specify
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessage">Message properties</param>
        /// <returns>ApiResponse of ScheduledMessageResponse</returns>
        public ApiResponse< ScheduledMessageResponse > ScheduleMessageWithHttpInfo (Message smsMessage)
        {
            // verify the required parameter 'smsMessage' is set
            if (smsMessage == null)
                throw new ApiException(400, "Missing required parameter 'smsMessage' when calling MessagesApi->ScheduleMessage");

            var localVarPath = "/message/schedule";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (smsMessage != null && smsMessage.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(smsMessage); // http body (model) parameter
            }
            else
            {
                localVarPostBody = smsMessage; // byte array
            }

            // authentication (JWT) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ScheduleMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ScheduledMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ScheduledMessageResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ScheduledMessageResponse)));
        }

        /// <summary>
        ///  Schedules an SMS message to be sent at the date-time you specify
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessage">Message properties</param>
        /// <returns>Task of ScheduledMessageResponse</returns>
        public async System.Threading.Tasks.Task<ScheduledMessageResponse> ScheduleMessageAsync (Message smsMessage)
        {
             ApiResponse<ScheduledMessageResponse> localVarResponse = await ScheduleMessageAsyncWithHttpInfo(smsMessage);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Schedules an SMS message to be sent at the date-time you specify
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessage">Message properties</param>
        /// <returns>Task of ApiResponse (ScheduledMessageResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ScheduledMessageResponse>> ScheduleMessageAsyncWithHttpInfo (Message smsMessage)
        {
            // verify the required parameter 'smsMessage' is set
            if (smsMessage == null)
                throw new ApiException(400, "Missing required parameter 'smsMessage' when calling MessagesApi->ScheduleMessage");

            var localVarPath = "/message/schedule";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (smsMessage != null && smsMessage.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(smsMessage); // http body (model) parameter
            }
            else
            {
                localVarPostBody = smsMessage; // byte array
            }

            // authentication (JWT) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ScheduleMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ScheduledMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ScheduledMessageResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ScheduledMessageResponse)));
        }

        /// <summary>
        ///  Sends an SMS message
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessage">Message properties</param>
        /// <returns>SendMessageResponse</returns>
        public SendMessageResponse SendMessage (Message smsMessage)
        {
             ApiResponse<SendMessageResponse> localVarResponse = SendMessageWithHttpInfo(smsMessage);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Sends an SMS message
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessage">Message properties</param>
        /// <returns>ApiResponse of SendMessageResponse</returns>
        public ApiResponse< SendMessageResponse > SendMessageWithHttpInfo (Message smsMessage)
        {
            // verify the required parameter 'smsMessage' is set
            if (smsMessage == null)
                throw new ApiException(400, "Missing required parameter 'smsMessage' when calling MessagesApi->SendMessage");

            var localVarPath = "/message/send";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (smsMessage != null && smsMessage.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(smsMessage); // http body (model) parameter
            }
            else
            {
                localVarPostBody = smsMessage; // byte array
            }

            // authentication (JWT) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SendMessageResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendMessageResponse)));
        }

        /// <summary>
        ///  Sends an SMS message
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessage">Message properties</param>
        /// <returns>Task of SendMessageResponse</returns>
        public async System.Threading.Tasks.Task<SendMessageResponse> SendMessageAsync (Message smsMessage)
        {
             ApiResponse<SendMessageResponse> localVarResponse = await SendMessageAsyncWithHttpInfo(smsMessage);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Sends an SMS message
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessage">Message properties</param>
        /// <returns>Task of ApiResponse (SendMessageResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SendMessageResponse>> SendMessageAsyncWithHttpInfo (Message smsMessage)
        {
            // verify the required parameter 'smsMessage' is set
            if (smsMessage == null)
                throw new ApiException(400, "Missing required parameter 'smsMessage' when calling MessagesApi->SendMessage");

            var localVarPath = "/message/send";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (smsMessage != null && smsMessage.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(smsMessage); // http body (model) parameter
            }
            else
            {
                localVarPostBody = smsMessage; // byte array
            }

            // authentication (JWT) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SendMessageResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendMessageResponse)));
        }

    }
}
